"use strict"

const blockStates = {
  unknown: 1,
  empty: 2,
  ship: 3,
  miss: 4,
  hit: 5,
  sunk: 6
};
const ships = {
  destroyer: 1,
  cruiser: 2,
  submarine: 3,
  battleship: 4,
  carrier: 5
};
const players = {
  self: 1,
  other: 2,
  botEasy: 3,
  botMedium: 4,
  botHard: 5
};
class Block
{
  constructor(row, column)
  {
    this.state = blockStates["unknown"];
    this.hasShip = false;
    this.row = row;
    this.column = column;
  }
  getState()
  {
    return this.state;
  }
  getRow()
  {
    return this.row;
  }
  getColumn()
  {
    return this.column;
  }
  getPos()
  {
    let block = {};
    block.row = this.getRow();
    block.column = this.getColumn();
    return block;
  }
  setState(state)
  {
    this.state = blockStates[state];
  }
  hasShip()
  {
    return this.hasShip;
  }
  setShip()
  {
    this.hasShip = true;
  }
  unsetShip()
  {
    this.hasShip = false;
  }
}

class SpecialShot
{
  constructor(length,silent)
  {
    let str;
      switch(length) {
        case 2:
          str = "destroyer";
          break;
        case 3:
          if(silent) {
            str = "submarine";
          } else {
            str = "cruiser";
          }
          break;
        case 4:
          str = "battleship";
          break;
        case 5:
          str = "carrier";
          break;
        default:
          throw Error("What the fuck ? Not supposed to go here");
      }

    this.limit = length;
    this.charge = 0;
    this.specialShot = ships[str];
  }
  reset()
  {
    this.charge = 0;
    return this.limit;
  }
  pumpItUp()
  {
    if(this.charge<this.limit) this.charge++;
    return this.limit - this.charge;
  }
  relaxMan()
  {
    if(this.charge>0) this.charge--;
    return this.limit - this.charge;
  }
}

class Ship
{
  constructor(length, silent)
  {
    let str;
      switch(length) {
        case 2:
          str = "destroyer";
          break;
        case 3:
          if(silent) {
            str = "submarine";
          } else {
            str = "cruiser";
          }
          break;
        case 4:
          str = "battleship";
          break;
        case 5:
          str = "carrier";
          break;
        default:
          throw Error("What the fuck ? Not supposed to go here");
      }

    this.name = str;
    this.length = length;
    this.blocks = [];
    for(let i=0; i<length; i++) {
      this.blocks.push(null);
    }
    this.silent = silent;
    this.stayinAlive = true;
    this.specialShot = new SpecialShot(length, silent);
    return true;
  }
  updateSpecialShot(up)
  {
      if(up) {
        return this.specialShot.pumpItUp();
      } else {
        return this.specialShot.relaxMan();
      }
  }
  resetSpecialShot()
  {
    return this.specialShot.reset();
  }
  setBlocks(blocks)
  {
      for(let i in blocks){
        this.blocks[i] = blocks[i];
      }
  }
}
class Ships
{
  constructor()
  {
    this.ships = [];
    this.ships.push(new Ship(2,false));
    this.ships.push(new Ship(3,false));
    this.ships.push(new Ship(3,true));
    this.ships.push(new Ship(4,false));
    this.ships.push(new Ship(5,false));
    this.specialShotsCharge = [];
    this.resetSpecialShot();
  }
  searchShip(name)
  {
    return this.ships.find(function(ship)
        {
          return ship.name===name;
        });
  }
  stillAlive()
  {
    for(let i in this.ships) {
      if(this.ships[i].stayinAlive) return true;
    }
    return false;
  }
  updateSpecialShots(up)
  {
    for(let i in this.ships) {
      this.specialShots[i] = this.ships[i].updateSpecialShot(up);
    }
  }
  resetSpecialShots()
  {
    for(let i in this.ships) {
      this.specialShots[i] = this.ships[i].resetSpecialShot();
    }
  }
  setShipBlocks(name, blocks)
  {
    this.searchShip(name).setBlocks(blocks);
  }
}

class Grid
{
  constructor(owner)
  {
    this.owner = players[owner];
    this.ships = new Ships();
    this.grid = [];
    let tmp;
    for(let i=0; i<10; i++) {
      tmp = [];
      for(let j=0; j<10; j++) {
        tmp.push(new Block(i,j));
      }
      this.grid.push(tmp);
    }
  }
}
